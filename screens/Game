import 'package:flutter/material.dart';
import '../models/team.dart';

void showNextGameDialog(BuildContext context, Team team) {
  if (team.nextGames == null || team.nextGames!.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
          content:
              Text('No hay información del próximo juego para ${team.name}')),
    );
    return;
  }

  final game = team.nextGames!.first;
  final dateFormatted = "${game.date.day}/${game.date.month}/${game.date.year}";

  String getAbbreviation(String name) {
    final words = name.split(' ');
    if (words.length > 1) {
      return words
          .map((word) => word.isNotEmpty ? word[0].toUpperCase() : '')
          .join();
    }
    return name.length >= 3
        ? name.substring(0, 3).toUpperCase()
        : name.toUpperCase();
  }

  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: Text('Próximo juego de ${team.name}',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text('Fecha: $dateFormatted', style: TextStyle(fontSize: 15)),
          SizedBox(height: 20),
          Container(
            padding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.grey[200],
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(
                  children: [
                    Image.network(
                      team.logoUrl,
                      width: 48,
                      height: 48,
                      errorBuilder: (context, error, stackTrace) {
                        return Icon(Icons.sports, size: 48);
                      },
                    ),
                    SizedBox(height: 4),
                    Text(
                      getAbbreviation(team.name),
                      style:
                          TextStyle(fontWeight: FontWeight.bold, fontSize: 15),
                    ),
                  ],
                ),
                Text(
                  (game.teamScore != null && game.opponentScore != null)
                      ? '${game.teamScore} - ${game.opponentScore}'
                      : 'Pendiente',
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                Column(
                  children: [
                    Image.network(
                      game.opponentLogoUrl ?? 'https://via.placeholder.com/48',
                      width: 48,
                      height: 48,
                      fit: BoxFit.contain,
                      errorBuilder: (context, error, stackTrace) {
                        return Icon(Icons.sports, size: 48, color: Colors.grey);
                      },
                    ),
                    SizedBox(height: 4),
                    Text(
                      getAbbreviation(game.opponent),
                      style:
                          TextStyle(fontWeight: FontWeight.bold, fontSize: 15),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: Text('Cerrar', style: TextStyle(fontSize: 15)),
        ),
      ],
    ),
  );
}
